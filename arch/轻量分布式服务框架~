轻量分布式服务框架
	Brain Ketelson
		● 一个巨大的代码单元实现的大应用,很难在不
	带来麻烦的前提下,对某些部分进行微小的修
	改。
		● 更小的组件允许在不影响其他部分的前提下
	进行调整,也更容易通过增加服务器的方式增
	加更多的服务节点来提升系统容量。

 轻量分布式服务框架

	● 需要分布式、高可用的协调服务
		○ Zookeeper/Doozer/ESB
	● 开放的通讯协议有助于跨语言的服务调用
		○ Protobuf/BSON/JSON/XML/SOAP
	● 民主制负载均衡消除了裁判服务的单点隐患
		○ 服务端发布自身状态,客户端根据状态进行选择
		○ 民主带来的风险
	● 每个人都有自己的天堂
		○ Doozer, Skynet
		○ Zookeeper, Norbert
		○ MQ/Redis/Memcache...

平台服务保障
	不中断服务(公路的例子)
	容量规划(高速公路5车道例子)
	预警机制 (依据是什么)
	流量调度/排队机制( 国庆高速公路不发卡例子)
	降级服务 (高速绕行国道例子)

## 稳定性/容灾
	高可用,为失效设计
		硬件/软件都会失效
		节点自我保护(拒绝服务/服务降级)
		处处维稳 (非典期间人员监控的例子)
	watchdog/heartbeat系统
	failover/takeover机制
可维护性
	系统健康检查和报警日常化
	双集群保证平滑切换
		想想公路修理例子
	系统升级/热部署日常化
	包管理
	代码和配置变更日常化
	节点添加/退出
	自动化部署

服务操作的可标识性
	服务操作具有全局唯一标识
	操作有唯一的，确定的时间

框架与设施建设目标：
	一致的架构风格
	简单的编程模型
	高可用与可伸缩
	轻量，可扩展
	尽量优化性能
	利用现有基础设施
	




	 
